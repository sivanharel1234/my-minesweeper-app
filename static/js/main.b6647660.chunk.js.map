{"version":3,"sources":["assets/images/flag.svg","assets/images/mine.svg","components/GameSettings.js","components/Cell.js","components/Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameSettings","state","width","height","mines","onWidthInputChange","event","setState","Number","target","value","onHeightInputChange","onMinesInputChange","onStartGameButtonClick","props","onStartButonClick","className","type","this","onChange","onClick","React","Component","Cell","shiftKey","onCellToggle","item","isFlagged","onCellClick","cellData","isMine","src","mineImg","alt","isEmpty","minesCount","cellDataLayer","coverLayer","isRevealed","flagLayer","flagImg","Board","flagsLefts","numberOfRemainingFlags","cellsArray","initCellsArray","flaggedMinesCounter","isLost","isWon","isSupermanMode","onSupermanModeCheckboxChange","checked","updatedCellsArray","updatedFlagsLefts","updatedFlaggedMinesCounter","point","y","x","updatedIsWon","numberOfMines","alert","handleMineCellClick","revealAdjacentEmptyCells","prevProps","prevState","snapshot","adjacentCells","length","cellCord","shift","getCellsNeighbors","forEach","neighbor","neighborCell","push","neighbors","isCellInBound","createAnEmptyBoardArray","addRandomizedMines","updateMinesCounts","rowArray","Math","floor","random","calculateAdjacentMines","gameStatus","map","row","key","cell","boardClass","getGameStatusLabel","id","htmlFor","style","minWidth","renderTableCellsTags","App","boardWidth","boardHeight","shouldDisplayBoard","gameSettings","errorMessage","getGameSettingsErrorMessage","totalNumberOfCells","renderBoard","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,iNCgD5BC,G,wNA5CXC,MAAQ,CACJC,MAAO,GACPC,OAAQ,GACRC,MAAO,I,EAGXC,mBAAqB,SAACC,GAClB,EAAKC,SAAS,CAAEL,MAAOM,OAAOF,EAAMG,OAAOC,U,EAG/CC,oBAAsB,SAACL,GACnB,EAAKC,SAAS,CAAEJ,OAAQK,OAAOF,EAAMG,OAAOC,U,EAGhDE,mBAAqB,SAACN,GAClB,EAAKC,SAAS,CAAEH,MAAOI,OAAOF,EAAMG,OAAOC,U,EAG/CG,uBAAyB,WACrB,EAAKC,MAAMC,kBAAkB,EAAKd,Q,uDAIlC,OACI,yBAAKe,UAAU,iBACX,yBAAKA,UAAU,SAAf,aACA,yBAAKA,UAAU,mBACX,yBAAKA,UAAU,SAAf,UACA,2BAAOA,UAAU,cAAcC,KAAK,SAASP,MAAOQ,KAAKjB,MAAMC,MAAOiB,SAAUD,KAAKb,sBAEzF,yBAAKW,UAAU,oBACX,yBAAKA,UAAU,SAAf,WACA,2BAAOA,UAAU,eAAeC,KAAK,SAASP,MAAOQ,KAAKjB,MAAME,OAAQgB,SAAUD,KAAKP,uBAE3F,yBAAKK,UAAU,mBACX,yBAAKA,UAAU,SAAf,UACA,2BAAOA,UAAU,cAAcC,KAAK,SAASP,MAAOQ,KAAKjB,MAAMG,MAAOe,SAAUD,KAAKN,sBAEzF,4BAAQQ,QAASF,KAAKL,wBAAtB,yB,GAvCWQ,IAAMC,Y,8CCkClBC,E,4MA9BXH,QAAU,SAACd,GACHA,EAAMkB,SACN,EAAKV,MAAMW,aAAa,EAAKX,MAAMY,MAC3B,EAAKZ,MAAMY,KAAKC,WACpB,EAAKb,MAAMc,YAAY,EAAKd,MAAMY,O,uDAK1C,IAAIG,EAAW,GACXX,KAAKJ,MAAMY,KAAKI,OAChBD,EAAW,yBAAKb,UAAU,aAAae,IAAKC,IAASC,IAAI,SAEnDf,KAAKJ,MAAMY,KAAKQ,UACtBL,EAAW,0BAAMb,UAAU,eAAeE,KAAKJ,MAAMY,KAAKS,aAE9D,IAAMC,EAAgB,yBAAKpB,UAAU,mBAAmBa,GAClDQ,EAAcnB,KAAKJ,MAAMY,KAAKY,WAA+E,GAAlE,yBAAKtB,UAAU,mBAAmBI,QAASF,KAAKE,UAC3FmB,EAAYrB,KAAKJ,MAAMY,KAAKC,UAAY,yBAAKX,UAAU,kBAAkBI,QAASF,KAAKE,SAAS,yBAAKJ,UAAU,aAAae,IAAKS,IAASP,IAAI,UAAiB,GAErK,OACI,wBAAIjB,UAAU,QACToB,EACAC,EACAE,O,GA1BElB,IAAMC,WCkPVmB,E,4MAlPXxC,MAAQ,CACJyC,WAAY,EAAK5B,MAAM6B,uBACvBC,WAAY,EAAKC,iBACjBC,oBAAqB,EACrBC,QAAQ,EACRC,OAAO,EACPC,gBAAgB,G,EAgBpBC,6BAA+B,SAAC5C,GAC5B,EAAKC,SAAS,CAAE0C,eAAgB3C,EAAMG,OAAO0C,W,EAGjD1B,aAAe,SAACC,GACZ,IAAK,EAAKzB,MAAM+C,QAAS,EAAK/C,MAAM8C,OAIpC,GAA8B,IAA1B,EAAK9C,MAAMyC,YAAqBhB,EAAKC,UAElC,CACH,IAAMyB,EAAoB,EAAKnD,MAAM2C,WACjCS,EAAoB,EAAKpD,MAAMyC,WAC/BY,EAA6B,EAAKrD,MAAM6C,oBAE5CM,EAAkB1B,EAAK6B,MAAMC,GAAG9B,EAAK6B,MAAME,GAAG9B,WAAaD,EAAKC,UAE5DD,EAAKC,WACL0B,IACI3B,EAAKI,QACLwB,MAGJD,IACI3B,EAAKI,QACLwB,KAIR,IAAMI,EAAeJ,IAA+B,EAAKxC,MAAM6C,cAE/D,EAAKpD,SAAS,CAACqC,WAAYQ,EAAmBV,WAAYW,EAAmBP,oBAAqBQ,EAA4BN,MAAOU,SAtBrIE,MAAM,qG,EA0BdhC,YAAc,SAACF,GACX,IAAK,EAAKzB,MAAM+C,QAAS,EAAK/C,MAAM8C,OAApC,CAIA,IAAIK,EAAoB,EAAKnD,MAAM2C,WAE/BQ,EAAkB1B,EAAK6B,MAAMC,GAAG9B,EAAK6B,MAAME,GAAG3B,OAC9C,EAAK+B,oBAAoBT,EAAmB1B,EAAK6B,MAAME,EAAG/B,EAAK6B,MAAMC,IAErE,EAAKM,yBAAyBV,EAAmB1B,EAAK6B,MAAME,EAAG/B,EAAK6B,MAAMC,GAC1E,EAAKjD,SAAS,CAACqC,WAAYQ,O,iEA5DhBW,EAAWC,EAAWC,GACjCF,IAAc7C,KAAKJ,OACnBI,KAAKX,SAAS,CACVmC,WAAYxB,KAAKJ,MAAM6B,uBACvBC,WAAY1B,KAAK2B,iBACjBC,oBAAqB,EACrBC,QAAQ,EACRC,OAAO,EACPC,gBAAgB,M,+CAwDHL,EAAYa,EAAGD,GAAI,IAAD,OACvCZ,EAAWY,GAAGC,GAAGnB,YAAa,EAE1BM,EAAWY,GAAGC,GAAGvB,SAAU,WAE3B,IADA,IAAMgC,EAAgB,CAAC,CAACT,IAAGD,MACpBU,EAAcC,OAAS,GAAG,CAC7B,IAAIC,EAAWF,EAAcG,QACb,EAAKC,kBAAkB1B,EAAYwB,EAASX,EAAGW,EAASZ,GAC9De,SAAQ,SAAAC,GACd,IAAIC,EAAe7B,EAAW4B,EAAShB,GAAGgB,EAASf,GAC9CgB,EAAanC,YAAemC,EAAa3C,SAC1C2C,EAAanC,YAAa,EACtBmC,EAAavC,SACbgC,EAAcQ,KAAKF,QAVR,K,wCAkBjB5B,EAAYa,EAAGD,GAC7B,IAAMmB,EAAY,GA0BjB,OAxBGzD,KAAK0D,cAAcnB,EAAE,EAAGD,IACxBmB,EAAUD,KAAK,CAACjB,EAAGA,EAAI,EAAGD,EAAGA,IAE7BtC,KAAK0D,cAAcnB,EAAE,EAAGD,EAAE,IAC1BmB,EAAUD,KAAK,CAACjB,EAAGA,EAAE,EAAGD,EAAGA,EAAI,IAE/BtC,KAAK0D,cAAcnB,EAAE,EAAGD,EAAE,IAC1BmB,EAAUD,KAAK,CAACjB,EAAGA,EAAE,EAAGD,EAAGA,EAAI,IAE/BtC,KAAK0D,cAAcnB,EAAGD,EAAE,IACxBmB,EAAUD,KAAK,CAACjB,EAAGA,EAAGD,EAAGA,EAAI,IAE7BtC,KAAK0D,cAAcnB,EAAGD,EAAE,IACxBmB,EAAUD,KAAK,CAACjB,EAAGA,EAAGD,EAAGA,EAAI,IAE7BtC,KAAK0D,cAAcnB,EAAE,EAAGD,IACxBmB,EAAUD,KAAK,CAACjB,EAAGA,EAAI,EAAGD,EAAGA,IAE7BtC,KAAK0D,cAAcnB,EAAE,EAAGD,EAAE,IAC1BmB,EAAUD,KAAK,CAACjB,EAAGA,EAAI,EAAGD,EAAGA,EAAI,IAEjCtC,KAAK0D,cAAcnB,EAAE,EAAGD,EAAE,IAC1BmB,EAAUD,KAAK,CAACjB,EAAGA,EAAI,EAAGD,EAAGA,EAAI,IAE7BmB,I,0CAGQvB,EAAmBK,EAAGD,GACtCJ,EAAkBI,GAAGC,GAAGnB,YAAa,EACrCpB,KAAKX,SAAS,CAACqC,WAAYQ,EAAmBL,QAAQ,M,uCAItD,IAAIH,EAAa1B,KAAK2D,0BAGtB,OAFA3D,KAAK4D,mBAAmBlC,GACxB1B,KAAK6D,kBAAkBnC,GAChBA,I,gDAKP,IADA,IAAMA,EAAa,GACVY,EAAI,EAAGA,EAAItC,KAAKJ,MAAMX,OAAQqD,IAAK,CAExC,IADA,IAAMwB,EAAW,GACRvB,EAAI,EAAGA,EAAGvC,KAAKJ,MAAMZ,MAAOuD,IACjCuB,EAASN,KAAK,CACVnB,MAAO,CAAEE,IAAGD,KACZlB,YAAY,EACZX,WAAW,EACXO,SAAS,EACTJ,QAAQ,EACRK,WAAY,IAGpBS,EAAW8B,KAAKM,GAEpB,OAAOpC,I,yCAGQA,GAGf,IAFA,IAAIT,EAAa,EAEVA,EAAajB,KAAKJ,MAAM6C,eAAe,CAC1C,IAAIF,EAAIwB,KAAKC,MAAMD,KAAKE,SAAWjE,KAAKJ,MAAMZ,OAC1CsD,EAAIyB,KAAKC,MAAMD,KAAKE,SAAWjE,KAAKJ,MAAMX,QACzCyC,EAAWY,GAAGC,GAAG3B,SAClBc,EAAWY,GAAGC,GAAG3B,QAAS,EAC1BK,Q,wCAKMS,GACd,IAAK,IAAIY,EAAI,EAAGA,EAAItC,KAAKJ,MAAMX,OAAQqD,IACnC,IAAK,IAAIC,EAAI,EAAGA,EAAIvC,KAAKJ,MAAMZ,MAAOuD,IAC9Bb,EAAWY,GAAGC,GAAG3B,SACjBc,EAAWY,GAAGC,GAAGtB,WAAajB,KAAKkE,uBAAuBxC,EAAYa,EAAGD,GACzEZ,EAAWY,GAAGC,GAAGvB,QAA0C,IAAhCU,EAAWY,GAAGC,GAAGtB,c,6CAMrCS,EAAYa,EAAGD,GAClC,OAAOtC,KAAKY,OAAOc,EAAYa,EAAE,EAAGD,GAChCtC,KAAKY,OAAOc,EAAYa,EAAE,EAAGD,EAAE,GAC/BtC,KAAKY,OAAOc,EAAYa,EAAE,EAAGD,EAAE,GAC/BtC,KAAKY,OAAOc,EAAYa,EAAGD,EAAE,GAC7BtC,KAAKY,OAAOc,EAAYa,EAAGD,EAAE,GAC7BtC,KAAKY,OAAOc,EAAYa,EAAE,EAAGD,GAC7BtC,KAAKY,OAAOc,EAAYa,EAAE,EAAGD,EAAE,GAC/BtC,KAAKY,OAAOc,EAAYa,EAAE,EAAGD,EAAE,K,6BAGhCZ,EAAYa,EAAGD,GAClB,OAAOtC,KAAK0D,cAAcnB,EAAGD,IAAMZ,EAAWY,GAAGC,GAAG3B,S,oCAG1C2B,EAAGD,GACb,OAAOC,EAAIvC,KAAKJ,MAAMZ,OAAUuD,GAAK,GACjCD,EAAItC,KAAKJ,MAAMX,QAAUqD,GAAK,I,2CAIlC,IAAI6B,EAAa,GAMjB,OALInE,KAAKjB,MAAM8C,OACXsC,EAAa,mCACNnE,KAAKjB,MAAM+C,QAClBqC,EAAa,cAEVA,I,6CAGa,IAAD,OAMnB,OALkBnE,KAAKjB,MAAM2C,WAAW0C,KAAI,SAACC,GACzC,OAAQ,wBAAIC,IAAKD,EAAI,GAAGhC,MAAMC,GACzB+B,EAAID,KAAI,SAAAG,GAAI,OAAI,kBAAC,EAAD,CAAMD,IAAG,UAAKC,EAAKlC,MAAME,EAAhB,YAAqBgC,EAAKlC,MAAMC,GAAK9B,KAAM+D,EAAM7D,YAAa,EAAKA,YAAaH,aAAc,EAAKA,wB,+BAOrI,IAAMiE,EAAaxE,KAAKjB,MAAMgD,eAAiB,gCAAkC,kBAGjF,OACI,yBAAKjC,UAAU,SACX,yBAAKA,UAAU,eAAeE,KAAKyE,sBACnC,yBAAK3E,UAAU,oCACX,2BAAOC,KAAK,WAAWD,UAAU,yBAAyB4E,GAAG,yBAAyBzC,QAASjC,KAAKjB,MAAMgD,eAAgB9B,SAAUD,KAAKgC,+BACzI,2BAAO2C,QAAQ,0BAAf,kBAEJ,yBAAK7E,UAAU,6BAAf,eACiBE,KAAKjB,MAAMyC,YAE5B,2BAAO1B,UAAW0E,EAAYI,MAAO,CAACC,SAZ5B,GAYsC7E,KAAKJ,MAAMZ,QACvD,+BACKgB,KAAK8E,8B,GA3OV3E,IAAMC,WCuEX2E,E,4MArEXhG,MAAQ,CACJiG,WAAY,EACZC,YAAa,EACbxC,cAAe,EACfhB,uBAAwB,EACxByD,oBAAoB,G,EAsBxBvF,uBAAyB,SAACwF,GACtB,IAAMC,EAAe,EAAKC,4BAA4BF,GAClDC,EACA1C,MAAM0C,GAEN,EAAK/F,SAAS,CACV2F,WAAaG,EAAanG,MAC1BiG,YAAaE,EAAalG,OAC1BwD,cAAe0C,EAAajG,MAC5BuC,uBAAwB0D,EAAajG,MACrCgG,oBAAoB,K,0EA9BJC,GACxB,IAAMG,EAAqBH,EAAanG,MAAQmG,EAAalG,OACzDmG,EAAe,GAenB,OAbID,EAAanG,OAAS,GAAKmG,EAAanG,MAAQ,OAChDoG,EAAe,sEAEfD,EAAalG,QAAU,GAAKkG,EAAalG,OAAS,OAClDmG,GAAgB,sEAEhBD,EAAajG,OAASoG,IACtBF,GAAgB,sFAEhBD,EAAajG,OAAS,IACtBkG,GAAgB,4EAGbA,I,oCAmBP,OAAGpF,KAAKjB,MAAMmG,mBAEN,kBAAC,EAAD,CACIlG,MAAOgB,KAAKjB,MAAMiG,WAClB/F,OAAQe,KAAKjB,MAAMkG,YACnBxC,cAAezC,KAAKjB,MAAM0D,cAC1BhB,uBAAwBzB,KAAKjB,MAAM0C,yBAIxC,O,+BAIP,OACI,yBAAK3B,UAAU,sBACX,yBAAKA,UAAU,aAAf,8BACA,kBAAC,EAAD,CACID,kBAAmBG,KAAKL,yBAE3BK,KAAKuF,mB,GAhEJpF,IAAMC,WCOJoF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b6647660.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/flag.4f2d7cfb.svg\";","module.exports = __webpack_public_path__ + \"static/media/mine.364fd970.svg\";","import React from 'react';\nimport '../assets/scss/GameSettings.scss';\n\nclass GameSettings extends React.Component {\n    state = {\n        width: '',\n        height: '',\n        mines: '',\n    };\n\n    onWidthInputChange = (event) => {\n        this.setState({ width: Number(event.target.value) });\n    };\n\n    onHeightInputChange = (event) => {\n        this.setState({ height: Number(event.target.value) });\n    };\n\n    onMinesInputChange = (event) => {\n        this.setState({ mines: Number(event.target.value) });\n    };\n\n    onStartGameButtonClick = () => {\n        this.props.onStartButonClick(this.state);\n    };\n\n    render() {\n        return (\n            <div className=\"game-settings\">\n                <div className=\"title\">Settings:</div>\n                <div className=\"width-container\">\n                    <div className=\"label\">Width:</div>\n                    <input className=\"width-input\" type=\"number\" value={this.state.width} onChange={this.onWidthInputChange}></input>\n                </div>\n                <div className=\"height-container\">\n                    <div className=\"label\">Height:</div>\n                    <input className=\"height-input\" type=\"number\" value={this.state.height} onChange={this.onHeightInputChange}></input>\n                </div>\n                <div className=\"mines-container\">\n                    <div className=\"label\">Mines:</div>\n                    <input className=\"mines-input\" type=\"number\" value={this.state.mines} onChange={this.onMinesInputChange}></input>\n                </div>\n                <button onClick={this.onStartGameButtonClick}>Start a new game</button>\n            </div>\n        );\n    }\n}\n\nexport default GameSettings;","import React from 'react';\nimport '../assets/scss/Cell.scss';\nimport flagImg from '../assets/images/flag.svg';\nimport mineImg from '../assets/images/mine.svg';\n\nclass Cell extends React.Component {\n\n    onClick = (event) => {\n        if (event.shiftKey) {\n            this.props.onCellToggle(this.props.item);\n        } else if (!this.props.item.isFlagged) {\n                this.props.onCellClick(this.props.item);\n        }\n    };\n\n    render() {\n        let cellData = '';\n        if (this.props.item.isMine) {\n            cellData = <img className=\"mine-image\" src={mineImg} alt=\"mine\" />;\n        }\n        else if (!this.props.item.isEmpty) {\n            cellData = <span className=\"mines-count\">{this.props.item.minesCount}</span>;\n        }\n        const cellDataLayer = <div className=\"cell-data-layer\">{cellData}</div>;\n        const coverLayer = !this.props.item.isRevealed ? <div className=\"cell-cover-layer\" onClick={this.onClick}></div> : '';\n        const flagLayer = this.props.item.isFlagged ? <div className=\"cell-flag-layer\" onClick={this.onClick}><img className=\"flag-image\" src={flagImg} alt=\"flag\"/></div> : '';\n\n        return (\n            <td className=\"cell\">\n                {cellDataLayer}\n                {coverLayer}\n                {flagLayer}\n            </td>\n        );\n    }\n}\n\nexport default Cell;","import React from 'react';\nimport '../assets/scss/Board.scss';\nimport Cell from \"./Cell\";\n\nclass Board extends React.Component {\n    state = {\n        flagsLefts: this.props.numberOfRemainingFlags,\n        cellsArray: this.initCellsArray(),\n        flaggedMinesCounter: 0,\n        isLost: false,\n        isWon: false,\n        isSupermanMode: false,\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps !== this.props) {\n            this.setState({\n                flagsLefts: this.props.numberOfRemainingFlags,\n                cellsArray: this.initCellsArray(),\n                flaggedMinesCounter: 0,\n                isLost: false,\n                isWon: false,\n                isSupermanMode: false,\n            });\n        }\n    }\n\n    onSupermanModeCheckboxChange = (event) => {\n        this.setState({ isSupermanMode: event.target.checked });\n    };\n\n    onCellToggle = (item) => {\n        if  (this.state.isWon || this.state.isLost) {\n            return;\n        }\n\n        if (this.state.flagsLefts === 0 && !item.isFlagged) {\n            alert(\"You don't have flags. /n In order to add a flag, you should first remove a flag from other cell.\")\n        } else {\n            const updatedCellsArray = this.state.cellsArray;\n            let updatedFlagsLefts = this.state.flagsLefts;\n            let updatedFlaggedMinesCounter = this.state.flaggedMinesCounter;\n\n            updatedCellsArray[item.point.y][item.point.x].isFlagged = !item.isFlagged;\n\n            if (item.isFlagged) {\n                updatedFlagsLefts--;\n                if (item.isMine) {\n                    updatedFlaggedMinesCounter++;\n                }\n            } else {\n                updatedFlagsLefts++;\n                if (item.isMine) {\n                    updatedFlaggedMinesCounter--;\n                }\n            }\n\n            const updatedIsWon = updatedFlaggedMinesCounter === this.props.numberOfMines;\n\n            this.setState({cellsArray: updatedCellsArray, flagsLefts: updatedFlagsLefts, flaggedMinesCounter: updatedFlaggedMinesCounter, isWon: updatedIsWon})\n        }\n    };\n\n    onCellClick = (item) => {\n        if  (this.state.isWon || this.state.isLost) {\n            return;\n        }\n\n        let updatedCellsArray = this.state.cellsArray;\n\n        if (updatedCellsArray[item.point.y][item.point.x].isMine) {\n            this.handleMineCellClick(updatedCellsArray, item.point.x, item.point.y)\n        } else {\n            this.revealAdjacentEmptyCells(updatedCellsArray, item.point.x, item.point.y);\n            this.setState({cellsArray: updatedCellsArray});\n        }\n    };\n\n    revealAdjacentEmptyCells(cellsArray, x, y) {\n        cellsArray[y][x].isRevealed = true;\n\n        if (cellsArray[y][x].isEmpty) {\n            const adjacentCells = [{x, y}];\n            while (adjacentCells.length > 0) {\n                let cellCord = adjacentCells.shift();\n                let neighbors = this.getCellsNeighbors(cellsArray, cellCord.x, cellCord.y);\n                neighbors.forEach(neighbor => {\n                    let neighborCell = cellsArray[neighbor.y][neighbor.x];\n                    if (!neighborCell.isRevealed && !neighborCell.isMine) {\n                        neighborCell.isRevealed = true;\n                        if (neighborCell.isEmpty) {\n                            adjacentCells.push(neighbor);\n                        }\n                    }\n                })\n            }\n        }\n    }\n\n    getCellsNeighbors(cellsArray, x, y) {\n        const neighbors = [];\n\n        if (this.isCellInBound(x+1, y)) { // right\n            neighbors.push({x: x + 1, y: y});\n        }\n        if (this.isCellInBound(x+1, y-1)) { //right top\n            neighbors.push({x: x+1, y: y - 1});\n        }\n        if (this.isCellInBound(x+1, y+1)) { // right bottom\n            neighbors.push({x: x+1, y: y + 1});\n        }\n        if (this.isCellInBound(x, y-1)) { // top\n            neighbors.push({x: x, y: y - 1});\n        }\n        if (this.isCellInBound(x, y+1)) { // bottom\n            neighbors.push({x: x, y: y + 1});\n        }\n        if (this.isCellInBound(x-1, y)) { // left\n            neighbors.push({x: x - 1, y: y});\n        }\n        if (this.isCellInBound(x-1, y-1)) { // left top\n            neighbors.push({x: x - 1, y: y - 1});\n        }\n        if (this.isCellInBound(x-1, y+1)) { // left bottom\n            neighbors.push({x: x - 1, y: y + 1});\n        }\n         return neighbors;\n    }\n\n    handleMineCellClick(updatedCellsArray, x, y) {\n        updatedCellsArray[y][x].isRevealed = true;\n        this.setState({cellsArray: updatedCellsArray, isLost: true });\n    }\n\n    initCellsArray() {\n        let cellsArray = this.createAnEmptyBoardArray();\n        this.addRandomizedMines(cellsArray);\n        this.updateMinesCounts(cellsArray);\n        return cellsArray;\n    }\n\n    createAnEmptyBoardArray() {\n        const cellsArray = [];\n        for (let y = 0; y < this.props.height; y++) {\n            const rowArray = [];\n            for (let x = 0; x< this.props.width; x++) {\n                rowArray.push({\n                    point: { x, y },\n                    isRevealed: false,\n                    isFlagged: false,\n                    isEmpty: false,\n                    isMine: false,\n                    minesCount: 0,\n                })\n            }\n            cellsArray.push(rowArray);\n        }\n        return cellsArray;\n    }\n\n    addRandomizedMines(cellsArray) {\n        let minesCount = 0;\n\n        while (minesCount < this.props.numberOfMines) {\n            let x = Math.floor(Math.random() * this.props.width);\n            let y = Math.floor(Math.random() * this.props.height);\n            if (!cellsArray[y][x].isMine) {\n                cellsArray[y][x].isMine = true;\n                minesCount++;\n            }\n        }\n    }\n\n    updateMinesCounts(cellsArray) {\n        for (let y = 0; y < this.props.height; y++) {\n            for (let x = 0; x < this.props.width; x++) {\n                if(!cellsArray[y][x].isMine) {\n                    cellsArray[y][x].minesCount = this.calculateAdjacentMines(cellsArray, x, y);\n                    cellsArray[y][x].isEmpty = cellsArray[y][x].minesCount === 0;\n                }\n            }\n        }\n    }\n\n    calculateAdjacentMines(cellsArray, x, y) {\n        return this.isMine(cellsArray, x+1, y) + // right\n            this.isMine(cellsArray, x+1, y-1) + //right top\n            this.isMine(cellsArray, x+1, y+1) + // right bottom\n            this.isMine(cellsArray, x, y-1) + // top\n            this.isMine(cellsArray, x, y+1) + // bottom\n            this.isMine(cellsArray, x-1, y) + // left\n            this.isMine(cellsArray, x-1, y-1) + // left top\n            this.isMine(cellsArray, x-1, y+1); // left bottom\n    }\n\n    isMine(cellsArray, x, y) {\n        return this.isCellInBound(x, y) && cellsArray[y][x].isMine;\n    }\n\n    isCellInBound(x, y) {\n        return x < this.props.width &&  x >= 0 &&\n            y < this.props.height && y >= 0;\n    }\n\n    getGameStatusLabel() {\n        let gameStatus = '';\n        if (this.state.isLost) {\n            gameStatus = 'You lost, let\\'s start a new game';\n        } else if (this.state.isWon) {\n            gameStatus = 'You won!!!';\n        }\n        return gameStatus;\n    }\n\n    renderTableCellsTags() {\n        const cellsTags = this.state.cellsArray.map((row) => {\n            return (<tr key={row[0].point.y}>\n                {row.map(cell => <Cell key={`${cell.point.x},${cell.point.y}`} item={cell} onCellClick={this.onCellClick} onCellToggle={this.onCellToggle} />)}\n            </tr>)\n        });\n        return cellsTags;\n    }\n\n    render() {\n        const boardClass = this.state.isSupermanMode ? \"board-container superman-mode\" : \"board-container\";\n        const cellWidth = 18;\n\n        return (\n            <div className=\"board\">\n                <div className=\"game-status\">{this.getGameStatusLabel()}</div>\n                <div className=\"superman-mode-checkbox-container\">\n                    <input type=\"checkbox\" className=\"superman-mode-checkbox\" id=\"superman-mode-checkbox\" checked={this.state.isSupermanMode} onChange={this.onSupermanModeCheckboxChange}/>\n                    <label htmlFor=\"superman-mode-checkbox\">Superman mode</label>\n                </div>\n                <div className=\"remaining-flags-indicator\">\n                    flags left: {this.state.flagsLefts}\n                </div>\n                <table className={boardClass} style={{minWidth: this.props.width * cellWidth}}>\n                    <tbody>\n                        {this.renderTableCellsTags()}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nexport default Board;","import React from 'react';\nimport './assets/scss/App.scss';\nimport GameSettings from './components/GameSettings';\nimport Board from \"./components/Board\";\n\nclass App extends React.Component {\n    state = {\n        boardWidth: 0,\n        boardHeight: 0,\n        numberOfMines: 0,\n        numberOfRemainingFlags: 0,\n        shouldDisplayBoard: false,\n    };\n    getGameSettingsErrorMessage(gameSettings) {\n        const totalNumberOfCells = gameSettings.width * gameSettings.height;\n        let errorMessage = '';\n\n        if (gameSettings.width <= 0 || gameSettings.width > 300) {\n            errorMessage = 'Width must be between 1 and 300. Please enter a valid number \\n\\n';\n        }\n        if (gameSettings.height <= 0 || gameSettings.height > 300) {\n            errorMessage += 'Height must be between 1 and 300. Please enter a valid number \\n\\n';\n        }\n        if (gameSettings.mines >= totalNumberOfCells) {\n            errorMessage += 'Number of mines cannot reach the number of cells. Please enter a valid number \\n\\n';\n        }\n        if (gameSettings.mines <= 0) {\n            errorMessage += 'Number of mines must be greater than 0. Please enter a valid number \\n\\n';\n        }\n\n        return errorMessage;\n    }\n\n    onStartGameButtonClick = (gameSettings) => {\n        const errorMessage = this.getGameSettingsErrorMessage(gameSettings);\n        if (errorMessage) {\n            alert(errorMessage);\n        } else {\n            this.setState({\n                boardWidth : gameSettings.width,\n                boardHeight: gameSettings.height,\n                numberOfMines: gameSettings.mines,\n                numberOfRemainingFlags: gameSettings.mines,\n                shouldDisplayBoard: true,\n            });\n        }\n    };\n\n    renderBoard() {\n        if(this.state.shouldDisplayBoard) {\n            return (\n                <Board\n                    width={this.state.boardWidth}\n                    height={this.state.boardHeight}\n                    numberOfMines={this.state.numberOfMines}\n                    numberOfRemainingFlags={this.state.numberOfRemainingFlags}\n                />\n            );\n        }\n        return null;\n    }\n\n    render() {\n        return (\n            <div className=\"my-minesweeper-app\">\n                <div className=\"app-title\">Minesweeper by Sivan Harel</div>\n                <GameSettings\n                    onStartButonClick={this.onStartGameButtonClick}\n                />\n                {this.renderBoard()}\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker'; // todo: Sivan : check if needed!\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}